openapi: 3.0.0
info:
  title: API для управления мероприятиями и пользователями
  version: 1.0.0
  description: Документация для API мероприятий и пользователей
servers:
  - url: 'http://localhost:5000/api'

paths:
  /public/events:
    get:
      summary: Получить список всех мероприятий без защиты
      parameters:
        - name: page
          in: query
          description: Номер страницы (начиная с 1)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Количество мероприятий на странице
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      
      responses:
        '200':
          description: Успешный ответ с данными всех мероприятий
        '500':
          description: Ошибка сервера  

  /events:
    get:
      summary: Получить список всех мероприятий
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы (начиная с 1)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Количество мероприятий на странице
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      
      responses:
        '200':
          description: Успешный ответ с данными всех мероприятий
        '401':
          description: Не авторизован (отсутствует или неверный JWT-токен)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Ошибка сервера  
    post:
      summary: Создать новое мероприятие
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                date:
                  type: string
                  format: date
      responses:
        '201':
          description: Мероприятие успешно создано
        '400':
          description: Ошибка в запросе  
        '401':
          description: Не авторизован (отсутствует или неверный JWT-токен)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Ошибка сервера  

  /events/{id}:
    get:
      summary: Получить мероприятие по ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Мероприятие найдено
        '404':
          description: Мероприятие не найдено
    put:
      summary: Обновить мероприятие по ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                date:
                  type: string
                  format: date
      responses:
        '200':
          description: Мероприятие успешно обновлено
        '404':
          description: Мероприятие не найдено
    delete:
      summary: Удалить мероприятие по ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Мероприятие успешно удалено
        '404':
          description: Мероприятие не найдено

  /users:
    post:
      summary: Создать нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Пользователь успешно создан
        '400':
          description: Ошибка в запросе
        '500':
          description: Ошибка сервера        

  /users/{id}:
    get:
      summary: Получить информацию о пользователе по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Пользователь найден
        '404':
          description: Пользователь не найден

  /auth/register:
    post:
      summary: Регистрация нового пользователя 
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
        '400':
          description: Пользователь с таким email уже существует
        '500':
          description: Ошибка сервера    

  /auth/login:
    post:
      summary: Авторизация пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Успешная авторизация, возвращает токен
        '400':
          description: Ошибка валидации (отсутствует email или пароль)
        '404':
          description: Пользователь не найден
        '401':
          description: Неверный пароль
        '500':
          description: Ошибка сервера    

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT        
